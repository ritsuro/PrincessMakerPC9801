; "MUSCR2.ASM" 1990/01/04 R.H PC-9801UV11 make by R.H 1990
;
;	プレイヤー改行待ち用カーソル
;
;	カーソル明滅タイマ用にタイマ１を使用
;
; public subroutine.
;
;	ARAVRM:WORD		; vram area.	( DEST )

CODE	SEGMENT	PUBLIC	'CODE'
	ASSUME	CS:CODE,DS:DATA

	PUBLIC	MSWWAT		; カーソルボタン待ち

;*NON*;	EXTRN	TMUSER:NEAR	; ユーザの時系列処理／下位処理からの定期ＣＡＬＬ
;*NON*;	EXTRN	KEYPNC:NEAR	; パニックチェック

	EXTRN	MUSINI:NEAR	; マウスの初期化
	EXTRN	MUSRED:NEAR	; マウス読み込み
	EXTRN	MUSSTP:NEAR	; マウスの終了

	EXTRN	TMWAIT:NEAR	; time wait.
	EXTRN	TMVSRT:NEAR	; V-SYNC timer start.
	EXTRN	TMVEND:NEAR	; V-SYNC timer end.
	EXTRN	TMVWAT:NEAR	; V-SYNC timer wait.
	EXTRN	TMVSET:NEAR	; V-SYNC timer set.
	EXTRN	TMVCHK:NEAR	; V-SYNC timer check.
	EXTRN	TMVCLR:NEAR	; V-SYNC timer clear.
	EXTRN	TMVSTP:NEAR	; V-SYNC timer stop.
	EXTRN	TMVCNT:NEAR	; V-SYNC timer cont.



ADDWIDTHCRT	EQU	80	; カーソル用計算
ADDWIDTH	EQU	80-4	; カーソル用計算
ADDWIDTH_SV	EQU	80-5	; エリア退避用計算
CUSLINE		EQU	32	; カーソルライン数
CUSLINE_SV	EQU	40	; エリア退避ライン数
MUSMAX_X	EQU	80-5	; マウス座標最大Ｘ
MUSMAX_Y	EQU	50-5	; マウス座標最大Ｙ
OFST_X		EQU	2	; マウス座標オフセットＸ
OFST_Y		EQU	2	; マウス座標オフセットＹ

WAIT_SET	EQU	20	; カーソル明滅タイマ

WAIT_SET_RET	EQU	2	; リターン前タイム


;	カーソルボタン待ち
;	-I- AX : カーソルＸ座標
;	    BX : カーソルＹ座標

MSWWAT	PROC	NEAR
	PUSH	AX
	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI
	PUSH	DI
	PUSH	BP
	PUSH	DS
	PUSH	ES

	MOV	CURX,AX
	MOV	CURY,BX

	CALL	TMVCNT		; V-SYNC timer cont.

	CALL	VRAM_SAVE	; ＶＲＡＭ退避

	CALL	VRAM_PUT	; ＶＲＡＭカーソルＰＵＴ

	MOV	AX,WAIT_SET	; カーソル明滅タイマ
	CALL	TMVSET		; V-SYNC timer set.

MSWWAT1:			;
;*NON*;	CALL	KEYPNC		; パニックチェック
				;
	CALL	TMVCHK		; V-SYNC timer check.
	CMP	AX,1		; 0=timer now, 1=timer end.
	JNE	MSWWAT3		;

	CMP	CURSW,0		; 0=カーソルＯＦＦ
	JE	MSWWAT1_ON	;

	CALL	VRAM_LOAD	; ＶＲＡＭ戻す
	MOV	CURSW,0		; 0=カーソルＯＦＦ
	JMP	MSWWAT2		;
MSWWAT1_ON:			;
	CALL	VRAM_PUT	; ＶＲＡＭカーソルＰＵＴ
	MOV	CURSW,1		; 1=カーソルＯＮ
MSWWAT2:			;
	MOV	AX,WAIT_SET	; カーソル明滅タイマ
	CALL	TMVSET		; V-SYNC timer set.
MSWWAT3:			;


	CALL	MUSRED	; マウス読み込み
	CMP	DH,0	; 左ボタン（1：ＯＦＦ／0：ＯＮ）
	JZ	MSWWAT5	;
	CMP	DL,0	; 右ボタン（1：ＯＦＦ／0：ＯＮ）
	JZ	MSWWAT5	;
;*NON*;	CALL	TMUSER	; ユーザの時系列処理／下位処理からの定期ＣＡＬＬ
	JMP	MSWWAT1	;
MSWWAT5:		;
	CALL	VRAM_LOAD	; ＶＲＡＭ戻す


	POP	ES
	POP	DS
	POP	BP
	POP	DI
	POP	SI
	POP	DX
	POP	CX
	POP	BX
	POP	AX

	RET
MSWWAT	ENDP



;	ＶＲＡＭ退避

VRAM_SAVE	PROC	NEAR
	PUSH	DS

	MOV	BX,CURY		; カーソルＹ
;*;	SHL	BX,1		;
;*;	SHL	BX,1		;
;*;	SHL	BX,1		; bx = vy1 * 8

	SHL	BX,1		;
	SHL	BX,1		;  source point.
	SHL	BX,1		;
	SHL	BX,1		;  bx = vy1 * 80 + vx1
	MOV	AX,BX		;
	SHL	BX,1		;
	SHL	BX,1		;
	ADD	BX,AX		;
	ADD	BX,CURX		; カーソルＸ

	MOV	SI,BX		; 先頭オフセット

	MOV	DI,OFFSET VRMSAV0	; ＶＲＡＭ退避エリア

	MOV	AX,DS		; データセグメント
	MOV	ES,AX		;

	MOV	DX,DS

	MOV	AX,ARAVRM[0]	; vram area.
	MOV	DS,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_SAVE2:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	SI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_SAVE2

	MOV	SI,BX		; 先頭オフセット

	MOV	DS,DX		;

	MOV	AX,ARAVRM[2]	; vram area.
	MOV	DS,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_SAVE3:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	SI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_SAVE3

	MOV	SI,BX		; 先頭オフセット

	MOV	DS,DX		;

	MOV	AX,ARAVRM[4]	; vram area.
	MOV	DS,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_SAVE4:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	SI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_SAVE4

	MOV	SI,BX		; 先頭オフセット

	MOV	DS,DX		;

	MOV	AX,ARAVRM[6]	; vram area.
	MOV	DS,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_SAVE5:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	SI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_SAVE5

	POP	DS
	RET
VRAM_SAVE	ENDP



;	ＶＲＡＭ戻す

VRAM_LOAD	PROC	NEAR
	MOV	BX,CURY		; カーソルＹ
;*;	SHL	BX,1		;
;*;	SHL	BX,1		;
;*;	SHL	BX,1		; bx = vy1 * 8

	SHL	BX,1		;
	SHL	BX,1		;  source point.
	SHL	BX,1		;
	SHL	BX,1		;  bx = vy1 * 80 + vx1
	MOV	AX,BX		;
	SHL	BX,1		;
	SHL	BX,1		;
	ADD	BX,AX		;
	ADD	BX,CURX		; カーソルＸ

	MOV	SI,OFFSET VRMSAV0	; ＶＲＡＭ退避エリア

	MOV	DI,BX		; 先頭オフセット

	MOV	AX,ARAVRM[0]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_LOAD2:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	DI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_LOAD2

	MOV	DI,BX		; 先頭オフセット

	MOV	AX,ARAVRM[2]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_LOAD3:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	DI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_LOAD3

	MOV	DI,BX		; 先頭オフセット

	MOV	AX,ARAVRM[4]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_LOAD4:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	DI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_LOAD4

	MOV	DI,BX		; 先頭オフセット

	MOV	AX,ARAVRM[6]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE_SV	; エリア退避ライン数
VRAM_LOAD5:
	MOVSW			;
	MOVSW			;
	MOVSB			;
	ADD	DI,ADDWIDTH_SV	; エリア退避用計算

	LOOP	VRAM_LOAD5

	RET
VRAM_LOAD	ENDP


;	ＶＲＡＭカーソルＰＵＴ

VRAM_PUT	PROC	NEAR
	MOV	BX,CURY		; カーソルＹ
;*;	SHL	BX,1		;
;*;	SHL	BX,1		;
;*;	SHL	BX,1		; bx = vy1 * 8

	SHL	BX,1		;
	SHL	BX,1		;  source point.
	SHL	BX,1		;
	SHL	BX,1		;  bx = vy1 * 80 + vx1
	MOV	AX,BX		;
	SHL	BX,1		;
	SHL	BX,1		;
	ADD	BX,AX		;
	ADD	BX,CURX		; カーソルＸ

	MOV	SI,OFFSET CUSDAT0+4*4*32 ; カーソルマスク
	MOV	DI,BX		; 先頭オフセット

;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算0
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算1
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算2
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算3
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算4
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算5
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算6
;*;	ADD	DI,ADDWIDTHCRT	; カーソル用計算7
;*;	ADD	DI,1		;
;*;	MOV	AX,ARAVRM[6]	; vram area.
;*;	MOV	ES,AX		;
;*;	MOV	CX,CUSLINE	; カーソルライン数
;*;VRAM_PUT2_C:
;*;	LODSW			;
;*;	AND	WORD PTR ES:[DI],AX
;*;	INC	DI
;*;	INC	DI
;*;	LODSW			;
;*;	AND	WORD PTR ES:[DI],AX
;*;	INC	DI
;*;	INC	DI
;*;	ADD	DI,ADDWIDTH	;
;*;	LOOP	VRAM_PUT2_C


	MOV	SI,OFFSET CUSDAT0+4*4*32 ; カーソルマスク
	MOV	DI,BX		; 先頭オフセット
	MOV	AX,ARAVRM[0]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT2:
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT2

	MOV	SI,OFFSET CUSDAT0 ; カーソル
	MOV	DI,BX		; 先頭オフセット
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT22:
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT22


	MOV	SI,OFFSET CUSDAT0+4*4*32 ; カーソルマスク
	MOV	DI,BX		; 先頭オフセット
	MOV	AX,ARAVRM[2]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT3:
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT3


	MOV	SI,OFFSET CUSDAT0+1*4*32 ; カーソル
	MOV	DI,BX		; 先頭オフセット
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT33:
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT33


	MOV	SI,OFFSET CUSDAT0+4*4*32 ; カーソルマスク
	MOV	DI,BX		; 先頭オフセット
	MOV	AX,ARAVRM[4]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT4:
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT4


	MOV	SI,OFFSET CUSDAT0+2*4*32 ; カーソル
	MOV	DI,BX		; 先頭オフセット
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT44:
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT44


	MOV	SI,OFFSET CUSDAT0+4*4*32 ; カーソルマスク
	MOV	DI,BX		; 先頭オフセット
	MOV	AX,ARAVRM[6]	; vram area.
	MOV	ES,AX		;
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT5:
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	AND	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT5


	MOV	SI,OFFSET CUSDAT0+3*4*32 ; カーソル
	MOV	DI,BX		; 先頭オフセット
	MOV	CX,CUSLINE	; カーソルライン数
VRAM_PUT55:
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	LODSW			;
	OR	WORD PTR ES:[DI],AX
	INC	DI
	INC	DI
	ADD	DI,ADDWIDTH	;
	LOOP	VRAM_PUT55

	RET
VRAM_PUT	ENDP

CODE	ENDS


DATA	SEGMENT	PUBLIC	'DATA'

EXTRN	ARAVRM:WORD		; vram area.

PUBLIC	MSWDAT			; カーソルデータ

	EVEN
MSWDAT	LABEL	BYTE		; カーソルデータ
CUSDAT0	LABEL	WORD
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	001H,0ffH,0ffH,080H,000H,0d5H,040H,000H
		DB	000H,06aH,080H,000H,000H,035H,000H,000H
		DB	000H,01aH,000H,000H,000H,00cH,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	001H,0ffH,0ffH,080H,000H,0d5H,040H,000H
		DB	000H,06aH,080H,000H,000H,035H,000H,000H
		DB	000H,01aH,000H,000H,000H,00cH,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,007H,0ffH,0ffH,0e0H
		DB	007H,0ffH,0ffH,0e0H,003H,0d5H,040H,0c0H
		DB	001H,0eaH,081H,080H,000H,0f5H,003H,000H
		DB	000H,07aH,006H,000H,000H,03cH,00cH,000H
		DB	000H,018H,018H,000H,000H,00cH,030H,000H
		DB	000H,006H,060H,000H,000H,003H,0c0H,000H
		DB	000H,001H,080H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	001H,0ffH,0ffH,080H,000H,0ffH,0ffH,000H
		DB	000H,07fH,0feH,000H,000H,03fH,0fcH,000H
		DB	000H,01fH,0f8H,000H,000H,00fH,0f0H,000H
		DB	000H,007H,0e0H,000H,000H,003H,0c0H,000H
		DB	000H,001H,080H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	000H,000H,000H,000H,000H,000H,000H,000H
		DB	0ffH,0ffH,0ffH,0ffH,0f8H,000H,000H,01fH
		DB	0f8H,000H,000H,01fH,0fcH,000H,000H,03fH
		DB	0feH,000H,000H,07fH,0ffH,000H,000H,0ffH
		DB	0ffH,080H,001H,0ffH,0ffH,0c0H,003H,0ffH
		DB	0ffH,0e0H,007H,0ffH,0ffH,0f0H,00fH,0ffH
		DB	0ffH,0f8H,01fH,0ffH,0ffH,0fcH,03fH,0ffH
		DB	0ffH,0feH,07fH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH
		DB	0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH,0ffH




VRMSAV0 DB	40*5 DUP (?)		; ＶＲＡＭ退避エリア
VRMSAV1	DB	40*5 DUP (?)		;
VRMSAV2	DB	40*5 DUP (?)		;
VRMSAV3	DB	40*5 DUP (?)		;

CURX	DW	0			; カーソルＸ
CURY	DW	0			; カーソルＹ

CURNEWX	DW	0			; カーソル新しいＸ
CURNEWY	DW	0			; カーソル新しいＹ

CURSW	DW	0			; 0=カーソルＯＦＦ,1=カーソルＯＮ

DATA	ENDS

	END
;
;	end of "MUSCR2.ASM"
;
